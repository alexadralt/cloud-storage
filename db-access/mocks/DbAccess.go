// Code generated by mockery v2.53.4. DO NOT EDIT.

package db_access_mocks

import (
	dbaccess "cloud-storage/db-access"

	mock "github.com/stretchr/testify/mock"
)

// DbAccess is an autogenerated mock type for the DbAccess type
type DbAccess struct {
	mock.Mock
}

type DbAccess_Expecter struct {
	mock *mock.Mock
}

func (_m *DbAccess) EXPECT() *DbAccess_Expecter {
	return &DbAccess_Expecter{mock: &_m.Mock}
}

// AddDEC provides a mock function with given fields: dec
func (_m *DbAccess) AddDEC(dec *dbaccess.DEC) error {
	ret := _m.Called(dec)

	if len(ret) == 0 {
		panic("no return value specified for AddDEC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbaccess.DEC) error); ok {
		r0 = rf(dec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DbAccess_AddDEC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDEC'
type DbAccess_AddDEC_Call struct {
	*mock.Call
}

// AddDEC is a helper method to define mock.On call
//   - dec *dbaccess.DEC
func (_e *DbAccess_Expecter) AddDEC(dec interface{}) *DbAccess_AddDEC_Call {
	return &DbAccess_AddDEC_Call{Call: _e.mock.On("AddDEC", dec)}
}

func (_c *DbAccess_AddDEC_Call) Run(run func(dec *dbaccess.DEC)) *DbAccess_AddDEC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dbaccess.DEC))
	})
	return _c
}

func (_c *DbAccess_AddDEC_Call) Return(_a0 error) *DbAccess_AddDEC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DbAccess_AddDEC_Call) RunAndReturn(run func(*dbaccess.DEC) error) *DbAccess_AddDEC_Call {
	_c.Call.Return(run)
	return _c
}

// AddFile provides a mock function with given fields: generatedName, filename
func (_m *DbAccess) AddFile(generatedName string, filename string) error {
	ret := _m.Called(generatedName, filename)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(generatedName, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DbAccess_AddFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFile'
type DbAccess_AddFile_Call struct {
	*mock.Call
}

// AddFile is a helper method to define mock.On call
//   - generatedName string
//   - filename string
func (_e *DbAccess_Expecter) AddFile(generatedName interface{}, filename interface{}) *DbAccess_AddFile_Call {
	return &DbAccess_AddFile_Call{Call: _e.mock.On("AddFile", generatedName, filename)}
}

func (_c *DbAccess_AddFile_Call) Run(run func(generatedName string, filename string)) *DbAccess_AddFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DbAccess_AddFile_Call) Return(_a0 error) *DbAccess_AddFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DbAccess_AddFile_Call) RunAndReturn(run func(string, string) error) *DbAccess_AddFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetDEC provides a mock function with given fields: id
func (_m *DbAccess) GetDEC(id dbaccess.DecId) (dbaccess.DEC, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetDEC")
	}

	var r0 dbaccess.DEC
	var r1 error
	if rf, ok := ret.Get(0).(func(dbaccess.DecId) (dbaccess.DEC, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(dbaccess.DecId) dbaccess.DEC); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dbaccess.DEC)
	}

	if rf, ok := ret.Get(1).(func(dbaccess.DecId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbAccess_GetDEC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDEC'
type DbAccess_GetDEC_Call struct {
	*mock.Call
}

// GetDEC is a helper method to define mock.On call
//   - id dbaccess.DecId
func (_e *DbAccess_Expecter) GetDEC(id interface{}) *DbAccess_GetDEC_Call {
	return &DbAccess_GetDEC_Call{Call: _e.mock.On("GetDEC", id)}
}

func (_c *DbAccess_GetDEC_Call) Run(run func(id dbaccess.DecId)) *DbAccess_GetDEC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dbaccess.DecId))
	})
	return _c
}

func (_c *DbAccess_GetDEC_Call) Return(_a0 dbaccess.DEC, _a1 error) *DbAccess_GetDEC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DbAccess_GetDEC_Call) RunAndReturn(run func(dbaccess.DecId) (dbaccess.DEC, error)) *DbAccess_GetDEC_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewestDEC provides a mock function with no fields
func (_m *DbAccess) GetNewestDEC() (dbaccess.DEC, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNewestDEC")
	}

	var r0 dbaccess.DEC
	var r1 error
	if rf, ok := ret.Get(0).(func() (dbaccess.DEC, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dbaccess.DEC); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dbaccess.DEC)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DbAccess_GetNewestDEC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewestDEC'
type DbAccess_GetNewestDEC_Call struct {
	*mock.Call
}

// GetNewestDEC is a helper method to define mock.On call
func (_e *DbAccess_Expecter) GetNewestDEC() *DbAccess_GetNewestDEC_Call {
	return &DbAccess_GetNewestDEC_Call{Call: _e.mock.On("GetNewestDEC")}
}

func (_c *DbAccess_GetNewestDEC_Call) Run(run func()) *DbAccess_GetNewestDEC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DbAccess_GetNewestDEC_Call) Return(_a0 dbaccess.DEC, _a1 error) *DbAccess_GetNewestDEC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DbAccess_GetNewestDEC_Call) RunAndReturn(run func() (dbaccess.DEC, error)) *DbAccess_GetNewestDEC_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFile provides a mock function with given fields: generatedName
func (_m *DbAccess) RemoveFile(generatedName string) error {
	ret := _m.Called(generatedName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(generatedName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DbAccess_RemoveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFile'
type DbAccess_RemoveFile_Call struct {
	*mock.Call
}

// RemoveFile is a helper method to define mock.On call
//   - generatedName string
func (_e *DbAccess_Expecter) RemoveFile(generatedName interface{}) *DbAccess_RemoveFile_Call {
	return &DbAccess_RemoveFile_Call{Call: _e.mock.On("RemoveFile", generatedName)}
}

func (_c *DbAccess_RemoveFile_Call) Run(run func(generatedName string)) *DbAccess_RemoveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DbAccess_RemoveFile_Call) Return(_a0 error) *DbAccess_RemoveFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DbAccess_RemoveFile_Call) RunAndReturn(run func(string) error) *DbAccess_RemoveFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewDbAccess creates a new instance of DbAccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbAccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbAccess {
	mock := &DbAccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
