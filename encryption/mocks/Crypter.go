// Code generated by mockery v2.53.4. DO NOT EDIT.

package encryption_mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Crypter is an autogenerated mock type for the Crypter type
type Crypter struct {
	mock.Mock
}

type Crypter_Expecter struct {
	mock *mock.Mock
}

func (_m *Crypter) EXPECT() *Crypter_Expecter {
	return &Crypter_Expecter{mock: &_m.Mock}
}

// EncryptAndCopy provides a mock function with given fields: w, r
func (_m *Crypter) EncryptAndCopy(w io.Writer, r io.Reader) error {
	ret := _m.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for EncryptAndCopy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, io.Reader) error); ok {
		r0 = rf(w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Crypter_EncryptAndCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptAndCopy'
type Crypter_EncryptAndCopy_Call struct {
	*mock.Call
}

// EncryptAndCopy is a helper method to define mock.On call
//   - w io.Writer
//   - r io.Reader
func (_e *Crypter_Expecter) EncryptAndCopy(w interface{}, r interface{}) *Crypter_EncryptAndCopy_Call {
	return &Crypter_EncryptAndCopy_Call{Call: _e.mock.On("EncryptAndCopy", w, r)}
}

func (_c *Crypter_EncryptAndCopy_Call) Run(run func(w io.Writer, r io.Reader)) *Crypter_EncryptAndCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(io.Reader))
	})
	return _c
}

func (_c *Crypter_EncryptAndCopy_Call) Return(_a0 error) *Crypter_EncryptAndCopy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Crypter_EncryptAndCopy_Call) RunAndReturn(run func(io.Writer, io.Reader) error) *Crypter_EncryptAndCopy_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptFileName provides a mock function with given fields: filename
func (_m *Crypter) EncryptFileName(filename string) (string, error) {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for EncryptFileName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Crypter_EncryptFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptFileName'
type Crypter_EncryptFileName_Call struct {
	*mock.Call
}

// EncryptFileName is a helper method to define mock.On call
//   - filename string
func (_e *Crypter_Expecter) EncryptFileName(filename interface{}) *Crypter_EncryptFileName_Call {
	return &Crypter_EncryptFileName_Call{Call: _e.mock.On("EncryptFileName", filename)}
}

func (_c *Crypter_EncryptFileName_Call) Run(run func(filename string)) *Crypter_EncryptFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Crypter_EncryptFileName_Call) Return(_a0 string, _a1 error) *Crypter_EncryptFileName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Crypter_EncryptFileName_Call) RunAndReturn(run func(string) (string, error)) *Crypter_EncryptFileName_Call {
	_c.Call.Return(run)
	return _c
}

// NewCrypter creates a new instance of Crypter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrypter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Crypter {
	mock := &Crypter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
