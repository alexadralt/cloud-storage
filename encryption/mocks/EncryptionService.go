// Code generated by mockery v2.53.4. DO NOT EDIT.

package encryption_mocks

import (
	encryption "cloud-storage/encryption"

	mock "github.com/stretchr/testify/mock"
)

// EncryptionService is an autogenerated mock type for the EncryptionService type
type EncryptionService struct {
	mock.Mock
}

type EncryptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *EncryptionService) EXPECT() *EncryptionService_Expecter {
	return &EncryptionService_Expecter{mock: &_m.Mock}
}

// MakeDecryptRequest provides a mock function with given fields: ciphertext
func (_m *EncryptionService) MakeDecryptRequest(ciphertext []byte) (encryption.DecryptResponse, error) {
	ret := _m.Called(ciphertext)

	if len(ret) == 0 {
		panic("no return value specified for MakeDecryptRequest")
	}

	var r0 encryption.DecryptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (encryption.DecryptResponse, error)); ok {
		return rf(ciphertext)
	}
	if rf, ok := ret.Get(0).(func([]byte) encryption.DecryptResponse); ok {
		r0 = rf(ciphertext)
	} else {
		r0 = ret.Get(0).(encryption.DecryptResponse)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(ciphertext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptionService_MakeDecryptRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeDecryptRequest'
type EncryptionService_MakeDecryptRequest_Call struct {
	*mock.Call
}

// MakeDecryptRequest is a helper method to define mock.On call
//   - ciphertext []byte
func (_e *EncryptionService_Expecter) MakeDecryptRequest(ciphertext interface{}) *EncryptionService_MakeDecryptRequest_Call {
	return &EncryptionService_MakeDecryptRequest_Call{Call: _e.mock.On("MakeDecryptRequest", ciphertext)}
}

func (_c *EncryptionService_MakeDecryptRequest_Call) Run(run func(ciphertext []byte)) *EncryptionService_MakeDecryptRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *EncryptionService_MakeDecryptRequest_Call) Return(_a0 encryption.DecryptResponse, _a1 error) *EncryptionService_MakeDecryptRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EncryptionService_MakeDecryptRequest_Call) RunAndReturn(run func([]byte) (encryption.DecryptResponse, error)) *EncryptionService_MakeDecryptRequest_Call {
	_c.Call.Return(run)
	return _c
}

// MakeEncryptRequest provides a mock function with given fields: plaintext
func (_m *EncryptionService) MakeEncryptRequest(plaintext []byte) (encryption.EncryptResponse, error) {
	ret := _m.Called(plaintext)

	if len(ret) == 0 {
		panic("no return value specified for MakeEncryptRequest")
	}

	var r0 encryption.EncryptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (encryption.EncryptResponse, error)); ok {
		return rf(plaintext)
	}
	if rf, ok := ret.Get(0).(func([]byte) encryption.EncryptResponse); ok {
		r0 = rf(plaintext)
	} else {
		r0 = ret.Get(0).(encryption.EncryptResponse)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptionService_MakeEncryptRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeEncryptRequest'
type EncryptionService_MakeEncryptRequest_Call struct {
	*mock.Call
}

// MakeEncryptRequest is a helper method to define mock.On call
//   - plaintext []byte
func (_e *EncryptionService_Expecter) MakeEncryptRequest(plaintext interface{}) *EncryptionService_MakeEncryptRequest_Call {
	return &EncryptionService_MakeEncryptRequest_Call{Call: _e.mock.On("MakeEncryptRequest", plaintext)}
}

func (_c *EncryptionService_MakeEncryptRequest_Call) Run(run func(plaintext []byte)) *EncryptionService_MakeEncryptRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *EncryptionService_MakeEncryptRequest_Call) Return(_a0 encryption.EncryptResponse, _a1 error) *EncryptionService_MakeEncryptRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EncryptionService_MakeEncryptRequest_Call) RunAndReturn(run func([]byte) (encryption.EncryptResponse, error)) *EncryptionService_MakeEncryptRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncryptionService creates a new instance of EncryptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EncryptionService {
	mock := &EncryptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
